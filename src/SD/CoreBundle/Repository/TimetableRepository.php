<?php

namespace SD\CoreBundle\Repository;

/**
 * TimetableRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TimetableRepository extends \Doctrine\ORM\EntityRepository
{
    public function getTimetablesCount($file)
    {
    $queryBuilder = $this->createQueryBuilder('t');
    $queryBuilder->select($queryBuilder->expr()->count('t'));
    $queryBuilder->where('t.file = :file')->setParameter('file', $file);

    $query = $queryBuilder->getQuery();
    $singleScalar = $query->getSingleScalarResult();
    return $singleScalar;
    }
	
    public function getDisplayedTimetables($file, $firstRecordIndex, $maxRecord)
    {
    $queryBuilder = $this->createQueryBuilder('t');
    $queryBuilder->where('t.file = :file')->setParameter('file', $file);
    $queryBuilder->orderBy('t.type', 'ASC');
    $queryBuilder->addOrderBy('t.name', 'ASC');
    $queryBuilder->setFirstResult($firstRecordIndex);
    $queryBuilder->setMaxResults($maxRecord);
   
    $query = $queryBuilder->getQuery();
    $results = $query->getResult();
    return $results;
    }

	// Les grilles horaires du dossier. Query builder uniquement: utilisÃ© pour le formulaire des lignes de planification.
    public function getTimetablesQB($file)
    {
    $queryBuilder = $this->createQueryBuilder('t');
	$queryBuilder->where('t.file = :file')->setParameter('file', $file);
    $queryBuilder->orderBy('t.name', 'ASC');
   
    return $queryBuilder;
    }

	// Retourne la premiere grille horaire
	public function getFirstTimetable($file)
    {
    $queryBuilder = $this->createQueryBuilder('t');
	$queryBuilder->where('t.file = :file')->setParameter('file', $file);
    $queryBuilder->orderBy('t.name', 'ASC');
	$queryBuilder->setMaxResults(1);

	$query = $queryBuilder->getQuery();
	$results = $query->getOneOrNullResult();
	return $results;
	}


	// Suprime les grilles horaires d'un dossier (ACTUELLEMENT PAS UTILISE)
    public function deleteTimetables($file)
    {
    $queryBuilder = $this->createQueryBuilder('t');
    $queryBuilder->delete();
    $queryBuilder->where('t.file = :file')->setParameter('file', $file);
   
    $query = $queryBuilder->getQuery();
    $results = $query->getResult();
    }


	// Nombre de grilles horaires saisies par l'utilisateur (type = T)
    public function getUserTimetablesCount($file)
    {
    $queryBuilder = $this->createQueryBuilder('t');
    $queryBuilder->select($queryBuilder->expr()->count('t'));
    $queryBuilder->where('t.file = :file')->setParameter('file', $file);
    $queryBuilder->andWhere('t.type = :type')->setParameter('type', 'T');

    $query = $queryBuilder->getQuery();
    $singleScalar = $query->getSingleScalarResult();
    return $singleScalar;
    }

	// Liste des grilles horaires saisies par l'utilisateur (type = T)
    public function getUserTimetables($file)
    {
    $queryBuilder = $this->createQueryBuilder('t');
    $queryBuilder->where('t.file = :file')->setParameter('file', $file);
    $queryBuilder->andWhere('t.type = :type')->setParameter('type', 'T');
    $queryBuilder->orderBy('t.type', 'ASC');
    $queryBuilder->addOrderBy('t.name', 'ASC');
   
    $query = $queryBuilder->getQuery();
    $results = $query->getResult();
    return $results;
    }
}
