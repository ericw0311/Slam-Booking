<?php

namespace SD\CoreBundle\Repository;

/**
 * TimetableLineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TimetableLineRepository extends \Doctrine\ORM\EntityRepository
{
    // Recherche les creneaux d'une grille horaire
    public function getTimetableLines($timetable)
    {
    $queryBuilder = $this->createQueryBuilder('tl');
    $queryBuilder->where('tl.timetable = :timetable')->setParameter('timetable', $timetable);
    $queryBuilder->orderBy('tl.id', 'ASC');
   
    $query = $queryBuilder->getQuery();
    $results = $query->getResult();
    return $results;
    }

    // Recherche les derniers creneaux horaires d'une grille
    public function getLastTimetableLines($timetable, $maxRecord)
    {
    $queryBuilder = $this->createQueryBuilder('tl');
    $queryBuilder->where('tl.timetable = :timetable')->setParameter('timetable', $timetable);
    $queryBuilder->orderBy('tl.id', 'DESC');
    $queryBuilder->setMaxResults($maxRecord);
   
    $query = $queryBuilder->getQuery();
    $results = $query->getResult();
    return $results;
    }

    // Recherche quelques creneaux horaires d'une grille a partir d'une position
    public function getSomeTimetableLines($timetable, $timetableLineID, $maxRecord, $previous = false)
    {
    $queryBuilder = $this->createQueryBuilder('tl');
    $queryBuilder->where('tl.timetable = :timetable')->setParameter('timetable', $timetable);
    if ($previous) {
        $queryBuilder->andWhere('tl.id < :timetableLineID')->setParameter('timetableLineID', $timetableLineID);
    } else {
        $queryBuilder->andWhere('tl.id > :timetableLineID')->setParameter('timetableLineID', $timetableLineID);
    }
    if ($previous) {
        $queryBuilder->orderBy('tl.id', 'DESC');
    } else {
        $queryBuilder->orderBy('tl.id', 'ASC');
    }
    $queryBuilder->setMaxResults($maxRecord);
   
    $query = $queryBuilder->getQuery();
    $results = $query->getResult();
    return $results;
    }

	// Retourne le creneau horaire precedent
	public function getPreviousTimetableLine($timetable, $timetableLineID)
    {
	$queryBuilder = $this->createQueryBuilder('tl');
	$queryBuilder->where('tl.timetable = :timetable')->setParameter('timetable', $timetable);
	$queryBuilder->andWhere('tl.id < :timetableLineID')->setParameter('timetableLineID', $timetableLineID);
	$queryBuilder->orderBy('tl.id', 'DESC');
	$queryBuilder->setMaxResults(1);

	$query = $queryBuilder->getQuery();
	$results = $query->getOneOrNullResult();
	return $results;
	}

	// Retourne le creneau horaire suivant
	public function getNextTimetableLine($timetable, $timetableLineID)
    {
	$queryBuilder = $this->createQueryBuilder('tl');
	$queryBuilder->where('tl.timetable = :timetable')->setParameter('timetable', $timetable);
	$queryBuilder->andWhere('tl.id > :timetableLineID')->setParameter('timetableLineID', $timetableLineID);
	$queryBuilder->orderBy('tl.id', 'ASC');
	$queryBuilder->setMaxResults(1);

	$query = $queryBuilder->getQuery();
	$results = $query->getOneOrNullResult();
	return $results;
	}

	// Retourne le creneau horaire courant et les suivants
	public function getCurrentAndNextTimetableLines($timetable, $timetableLineID)
    {
	$queryBuilder = $this->createQueryBuilder('tl');
	$queryBuilder->where('tl.timetable = :timetable')->setParameter('timetable', $timetable);
	$queryBuilder->andWhere('tl.id >= :timetableLineID')->setParameter('timetableLineID', $timetableLineID);
	$queryBuilder->orderBy('tl.id', 'ASC');

	$query = $queryBuilder->getQuery();
    $results = $query->getResult();
	return $results;
	}

	// Retourne le dernier creneau horaire
	public function getLastTimetableLine($timetable)
	{
	$queryBuilder = $this->createQueryBuilder('tl');
	$queryBuilder->where('tl.timetable = :timetable')->setParameter('timetable', $timetable);
	$queryBuilder->orderBy('tl.id', 'DESC');
	$queryBuilder->setMaxResults(1);

	$query = $queryBuilder->getQuery();
	$results = $query->getOneOrNullResult();
	return $results;
	}
}
